# -*- coding: utf-8 -*-
"""Pandas_Demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19uO_-9ROfMbYqHNqFnu31mhS1Vi8eVPL

Dataset: https://www.kaggle.com/gregorut/videogamesales
"""

import pandas as pd

sales = pd.read_csv("vgsales.csv", index_col = "Rank")

sales

sales.dtypes

sales.head(5)
sales.head(n = 5)

sales.tail(20)

sales.sort_values("Name")
sales.sort_values("Name", ascending = True)

sales.sort_values("Name", ascending=False)

sales.sort_values("Name", ascending=False).head(3)

sales.sort_values(["Platform", "Global_Sales"], ascending=False)

sales.sort_values(["Platform", "Global_Sales"], ascending=[True, False])

# inplace will make the change permanent
sales.sort_values(["Platform", "Global_Sales"], ascending=[True, False], inplace = True)

sales.head()

sales.sort_index(ascending = True, inplace = True)

# Optimizations
## Number of entries - non-null count = number of NaN values
sales.info()

## drops rows with NaN value in the column year
sales.dropna(subset = ["Year"], inplace=True)

# outputs a series
sales["Year"]

sales["Year"].astype(int)

sales["Year"] = sales["Year"].astype(int)

sales["Year"]

sales.info()

sales.nunique()

sales["Genre"] = sales["Genre"].astype("category")
sales["Platform"] = sales["Platform"].astype("category")
sales.info()

# Selecting Columns
sales

sales["Publisher"]

# list in square brackets
sales[["Publisher", "Name", "Platform"]]

sales.head()

sales.reset_index(inplace = True)

sales.set_index("Name", inplace = True)

sales

sales.sort_index(inplace = True)

sales["Genre"].value_counts()

sales["Genre"].value_counts(normalize=True)

sales["Genre"].value_counts(normalize=True) * 100

# Selecting Rows
sales.head()

# You can select by name, label or by position
sales.loc["Wii Sports"]

sales.loc["Wii Sports", "Genre"]

sales.loc["Fallout 4"]

sales.loc[["Fallout 4", "Grand Theft Auto V"], ["Platform", "Global_Sales"]]

# Filtering
sales.head()

sales["Publisher"] == "Square Enix"

sales[sales["Publisher"] == "Square Enix"]

square_enix = sales["Publisher"] == "Square Enix"
sales[square_enix]

action_genre = sales["Genre"] == "Action"
sales[action_genre]

# AND
sales[square_enix & action_genre]

# OR
sales[square_enix | action_genre]

over_ten_million_sales = sales["Global_Sales"] > 10
sales[over_ten_million_sales]

early_90s_games = sales["Year"].between(1991, 1995)
sales[early_90s_games]

# Aggregate Operations
# Mean
sales["Global_Sales"].mean()

sales["Global_Sales"].sum()

sales["Global_Sales"].max()

sales["Global_Sales"].min()

genre_group = sales.groupby("Genre")

# calculates the sum of global sales per genre
genre_group["Global_Sales"].sum()

genre_group["Global_Sales"].sum().sort_values(ascending = False)

genre_group["Global_Sales"].sum().mean()

# Melting
## "unpivoting"
sales.head()

sales.reset_index(inplace = True)

sales.head()

## Wide and tall datasets

# Region Sales
# NA 0.11
# EU 0.3
# JP 0.2
sales.melt(
    id_vars = ["Name", "Publisher"],
    value_vars = ["NA_Sales", "EU_Sales", "JP_Sales", "Other_Sales"],
    var_name = "Region",
    value_name = "Sales"
    )